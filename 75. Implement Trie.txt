/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */

struct node {
    node* links[26];
    bool flag = false;
    bool containsKey(char ch) {
        return links[ch - 'a'] != NULL;
    }

    void put(char ch, node* temp){
        links[ch - 'a'] = temp;
    }

    node* get(char ch){
        return links[ch - 'a'];
    }

    bool setEnd() {
        flag = true;
    }

    bool isEnd(){
        return flag;
    }
};

class Trie {

private:
    node* root;

public:

    Trie() {
        root = new node();
    }

    void insert(string word) {
        node* temp = root;
        for(int i = 0; i < word.length(); i++){
            if(!temp->containsKey(word[i])) {
                temp->put(word[i], new node());
            }
            temp = temp->get(word[i]);
        }
        temp->setEnd();
    }

    bool search(string word) {
        node* temp = root;
        for(int i = 0; i < word.length(); i++){
            if(!temp->containsKey(word[i])){
                return false;
            }
            temp = temp->get(word[i]);
        }

        return temp->isEnd();
    }

    bool startsWith(string word) {
        node* temp = root;
        for(int i = 0; i < word.length(); i++){
            if(!temp->containsKey(word[i])){
                return false;
            }
            temp = temp->get(word[i]);
        }
        return true;
    }
};