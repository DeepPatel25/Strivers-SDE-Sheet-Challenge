#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/

void rootleft(TreeNode<int> *root, vector<int> &v)
{
	if (root == NULL || (!root->left && !root->right)) return;

	if (root->left)
	{
		v.push_back(root->data);
		rootleft(root->left, v);
	}
	else if (root->right)
	{
		v.push_back(root->data);
		rootleft(root->right, v);
	}
}

void leaf(TreeNode<int> *root, vector<int> &v)
{
	if (root == NULL) return;
	leaf(root->left, v);
	if (root->left == NULL && root->right == NULL) v.push_back(root->data);
	leaf(root->right, v);

}

void rootright(TreeNode<int> *root, vector<int> &v)
{
	if (root == NULL || (!root->left && !root->right)) return;

	if (root->right)
	{
		rootright(root->right, v);
	}
	else if (root->left)
	{
		rootright(root->left, v);
	}

	v.push_back(root->data);
}

vector<int> traverseBoundary(TreeNode<int> *root)
{
	if (root == NULL) return {};

	vector<int> v;
	v.push_back(root->data);

	if (!root->left && !root->right) return v;
	rootleft(root->left, v);
	leaf(root, v);
	rootright(root->right, v);

	return v;
}