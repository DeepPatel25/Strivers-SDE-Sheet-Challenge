#include <unordered_map>

/************************************************************
   
   Following is the TreeNode class structure
   
   class TreeNode<T>
   { 
   public:
        T data; 
        TreeNode<T> *left;
        TreeNode<T> *right;
   
        TreeNode(T data) 
  		{ 
            this -> data = data; 
            left = NULL; 
            right = NULL; 
        }
   };
   
   
************************************************************/
TreeNode<int>* solver(vector<int> &inOrder, vector<int> &postOrder,
     unordered_map<int, int> &hash, int &idx, int start, int end) {
          if(start == end) {
               TreeNode<int> *root = new TreeNode<int>(postOrder[idx]);
               idx--;
               return root;
          }

          if(start > end || end < 0) return NULL;

          TreeNode<int> *root = new TreeNode<int>(postOrder[idx]);
          int mid = hash[postOrder[idx]];
          idx--;

          root->right = solver(inOrder, postOrder, hash, idx, mid + 1, end);
          root->left = solver(inOrder, postOrder, hash, idx, start, mid - 1);

          return root;
     }

TreeNode<int>* getTreeFromPostorderAndInorder(vector<int>& postOrder, vector<int>& inOrder) 
{
	int n = postOrder.size();
     unordered_map<int, int> hash;
     for(int i = 0; i < n; i++) hash[inOrder[i]] = i;

     int idx = n - 1;
     return solver(inOrder, postOrder, hash, idx, 0, n - 1);
}
