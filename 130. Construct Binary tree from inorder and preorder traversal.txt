#include <bits/stdc++.h> 
/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
TreeNode<int>* solver(vector<int> &inorder, vector<int> &preorder, unordered_map<int, int> &hash,
    int &idx, int start, int end) {
        if(start == end) {
            TreeNode<int> *root = new TreeNode<int>(preorder[idx]);
            idx++;
            return root;
        }

        if(start > end || end < 0) return NULL;
        TreeNode<int>* root = new TreeNode<int>(preorder[idx]);
        int mid = hash[preorder[idx]];
        idx++;

        root->left = solver(inorder, preorder, hash, idx, start, mid - 1);
        root->right = solver(inorder, preorder, hash, idx, mid + 1, end);

        return root;
    }

TreeNode<int> *buildBinaryTree(vector<int> &inorder, vector<int> &preorder)
{
	int n = preorder.size();
    unordered_map<int, int> hash;

    for(int i = 0; i < n; i++) hash[inorder[i]] = i;

    int idx = 0;
    return solver(inorder, preorder, hash, idx, 0, n - 1);
}