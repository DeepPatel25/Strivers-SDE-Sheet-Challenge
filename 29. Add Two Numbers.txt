/**
 * Definition of linked list:
 *
 * class Node {
 * public:
 *      int data;
 *      Node *next;
 *      Node() {
 *          this->data = 0;
 *          this->next = NULL;
 *      }
 *      Node(int data) {
 *          this->data = data;
 *          this->next = NULL;
 *      }
 *      Node (int data, Node *next) {
 *          this->data = data;
 *          this->next = next;
 *      }
 * };
 *
 *************************************************************************/

Node *addTwoNumbers(Node *num1, Node *num2)
{
    int carry = 0;
    Node* head = NULL;
    Node* tail = NULL;

    while(num1 != NULL && num2 != NULL){
        int sum = num1->data + num2->data + carry;

        if(sum > 9) {
            carry = 1;
            sum = sum - 10;
        } else {
            carry = 0;
        }

        Node* temp = new Node(sum);

        if(head == NULL) {
            head = temp;
            tail = temp;
        } else {
            tail->next = temp;
            tail = tail->next;
        }

        num1 = num1->next;
        num2 = num2->next;
    }

    while(num1 != NULL) {
        int sum = num1->data + carry;

        if(sum > 9) {
            carry = 1;
            sum -= 10;
        } else {
            carry = 0;
        }

        Node* temp = new Node(sum);

        if(head == NULL) {
            head = temp;
            tail = temp;
        } else {
            tail->next = temp;
            tail = tail->next;
        }

        num1 = num1->next;
    }

    while(num2 != NULL) {
        int sum = num2->data + carry;

        if(sum > 9) {
            carry = 1;
            sum -= 10;
        } else {
            carry = 0;
        }

        Node* temp = new Node(sum);

        if(head == NULL) {
            head = temp;
            tail = temp;
        } else {
            tail->next = temp;
            tail = tail->next;
        }

        num2 = num2->next;
    }

    if(carry) {
        Node* temp = new Node(carry);

        if(head == NULL) {
            head = temp;
            tail = temp;
        } else {
            tail->next = temp;
            tail = tail->next;
        }
    }

    return head;
}
