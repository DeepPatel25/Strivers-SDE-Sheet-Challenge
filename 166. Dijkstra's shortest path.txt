#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
    unordered_map<int, list<pair<int, int>>> adj;
    for(int i = 0; i < edges; i++){
        int u = vec[i][0];
        int v = vec[i][1];
        int wt = vec[i][2];

        adj[u].push_back({v, wt});
        adj[v].push_back({u, wt});
    }

    vector<int> dist(vertices, INT_MAX);
    set<pair<int, int>> st;
    dist[source] = 0;
    st.insert({0, source});

    while(!st.empty()) {
        auto it = *(st.begin());
        int nodeDist = it.first;
        int u = it.second;
        st.erase(it);

        for(auto i: adj[u]) {
            int edgeWt = i.second;
            int adjNode = i.first;

            if(nodeDist + edgeWt < dist[adjNode]) {
                if(dist[adjNode] != INT_MAX)
                    st.erase({dist[adjNode], adjNode});
                
                dist[adjNode] = nodeDist + edgeWt;
                st.insert({dist[adjNode], adjNode});
            }
        }
    }

    return dist;
}
